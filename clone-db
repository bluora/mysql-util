#!/bin/bash
# clone-db: Clone a database into another database.

if [[ ! -e "${BASH_SOURCE%/*}/db.conf" ]]; then
    echo "Configuration file missing. We just copied the example for you."
    echo "Edit the db.conf file and re-run script."
    cp "${BASH_SOURCE%/*}/db.conf.example" "${BASH_SOURCE%/*}/db.conf"
  exit 1;
fi

. "${BASH_SOURCE%/*}/db.conf"

if [ -z "$1" ] || [ -z "$2" ]; then
  echo "clone-db [source] [destination] [no backup]";
  echo "";
  echo -e "\tsource\t\t- The source database (from list)";
  echo -e "\tdestination\t- The destination database (from list)";
  echo -e "\tno backup\t- optionally set this to 1 to not backup the destination database";
  echo "";
  exit 1;
fi

if [ "$2" == *"production"* ]; then 
    echo "You can not clone to production from any database."; 
    echo "";
    exit 1;
fi

SOURCE_DB=$1
DESTINATION_DB=$2

MYSQL_CMD="mysql --login-path=$SOURCE_DB -e \";\""

if [ ! $MYSQL_CMD 2>/dev/null ]; then
    echo "Incorrect MySQL login details for '$SOURCE_DB'"
    echo ""
    exit 1;
fi

MYSQL_CMD="mysql --login-path=$DESTINATION_DB -e \";\""

if [ ! $MYSQL_CMD 2>/dev/null ]; then
    echo "Incorrect MySQL login details for '$DESTINATION_DB'"
    echo ""
    exit 1;
fi

DATE=`date +%Y%m%d_%H%M%S`

echo "";
echo "This will clone all data from '$SOURCE_DB' into '$DESTINATION_DB'";
echo "";
if [ "$3" ]; then
    echo "WARNING: '$DESTINATION_DB' will not be backed up!"
else
    echo "NOTE: '$DESTINATION_DB' will be backed up to 'backups/saved/${DESTINATION_DB}_$DATE.sql'"
fi
echo "";
read -r -p "Do you want to continue? [y/N] " response
response=${response,,}    # tolower
if [[ $response =~ ^(yes|y)$ ]]; then

    # pull the database configuration

    if [ -z "$3" ]; then
        # Backup destination
        mkdir -p "./backups/saved"
        chown -R ubuntu:ubuntu "./backups" 
        mysqldump -CceKq --login-path=$DESTINATION_DB --single-transaction --add-drop-table --add-drop-database --databases $DESTINATION_DB > backups/saved/TEMP_${DESTINATION_DB}_$DATE.sql
        # Remove definer that can not be used in RDS
        perl -pe 's/\sDEFINER=`[^`]+`@`[^`]+`//' < ./backups/saved/TEMP_${DESTINATION_DB}_$DATE.sql > ./backups/saved/${DESTINATION_DB}_$DATE.sql
        unlink ./backups/saved/TEMP_${DESTINATION_DB}_$DATE.sql
        zip ./backups/saved/${DESTINATION_DB}_$DATE.zip ./backups/saved/${DESTINATION_DB}_$DATE.sql
        unlink ./backups/saved/${DESTINATION_DB}_$DATE.sql
    fi

    mkdir -p "./backups/current"

    # Pull the source down
    mysqldump -CceKq --login-path=$SOURCE_DB --single-transaction --add-drop-table $SOURCE_DB > backups/current/TEMP_$SOURCE_DB.sql

    # Remove definer that can not be used in RDS
    perl -pe 's/\sDEFINER=`[^`]+`@`[^`]+`//' < ./backups/current/TEMP_$SOURCE_DB.sql > ./backups/current/$SOURCE_DB.sql
    unlink ./backups/current/TEMP_$SOURCE_DB.sql

    # Push the source onto the destination
    mysql --login-path=$DESTINATION_DB -e "DROP DATABASE IF EXISTS ${DESTINATION_DB}"
    mysql --login-path=$DESTINATION_DB -e "CREATE DATABASE ${DESTINATION_DB} DEFAULT CHARACTER SET utf8mb4"
    mysql --login-path=$DESTINATION_DB --database=$DESTINATION_DB < backups/current/$SOURCE_DB.sql

    # Remove final restore file that we have used
    unlink ./backups/current/$SOURCE_DB.sql
        
fi

exit 0;