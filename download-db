#!/bin/bash
# download-db: Download and import a database.

trap "exit" INT

command -v mysql >/dev/null 2>&1 || { echo "I require mysql but it's not installed.  Aborting." >&2; exit 1; }
command -v mysqldump >/dev/null 2>&1 || { echo "I require mysqldump but it's not installed.  Aborting." >&2; exit 1; }
command -v zip >/dev/null 2>&1 || { echo "I require zip but it's not installed.  Aborting." >&2; exit 1; }

if [[ ! -e "${BASH_SOURCE%/*}/db.conf" ]]; then
    echo "Configuration file missing. We just copied the example for you."
    echo "Edit the db.conf file and re-run script."
    cp "${BASH_SOURCE%/*}/db.conf.example" "${BASH_SOURCE%/*}/db.conf"
  exit 1;
fi

. "${BASH_SOURCE%/*}/db.conf"

if [ -z "$1" ] || [ -z "$2" ]; then
  echo "download-db [source] [destination] [no backup]";
  echo "";
  echo -e "\tsource\t\t- The source database (from list)";
  echo -e "\tdestination\t- The destination database (from list)";
  echo -e "\tno backup\t- optionally set this to 1 to not backup the destination database";
  echo "";
  echo -e "\tAvailable remote databases:";
  
  for i in ${AVAILABLE_DB[@]}; do
    echo -e "\t- ${i}";
  done
  echo "";
  echo -e "\tAvailable destination databases:";
  
  mysql_config_editor print --all
  echo "";
  exit 1;
fi

SOURCE_DB=$1
SOURCE_CONFIG="remote_$1"
DESTINATION_DB=$2
IGNORE_BACKUP=$3

if [ -z $(eval "echo \${$SOURCE_CONFIG[HOST]}") ]; then
    echo "The name '$1' specified as the source database has no configuration.";
    echo "";
    exit 1;
fi

SOURCE_HOST=$(eval "echo \${$SOURCE_CONFIG[HOST]}")
SOURCE_DATABASE=$(eval "echo \${$SOURCE_CONFIG[DB]}")
BACKUP_BIN_PATH=$(eval "echo \${$SOURCE_CONFIG[BIN_PATH]}")

MYSQL_CMD="mysql --login-path=$DESTINATION_DB -e \";\""

if [ ! $MYSQL_CMD 2>/dev/null ]; then
    echo "Incorrect MySQL login details for '$DESTINATION_DB' - '$DESTINATION_HOST'"
    echo ""
    exit 1;
fi

DATE=`date +%Y%m%d_%H%M%S`

echo "";
echo -e "\e[32m   Server:\e[0m $SOURCE_HOST";
echo -e "\e[32mRemote DB:\e[0m $SOURCE_DATABASE"
echo -e "\e[32m Local DB:\e[0m $DESTINATION_DB";
echo "";

EXPECTED_SIZE=$(mysql --login-path=${DESTINATION_DB} -N -e "SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 0) AS \"Size (MB)\" FROM information_schema.TABLES WHERE table_schema=\"${DESTINATION_DB}\";")

if [ "$EXPECTED_SIZE" == "NULL" ]; then
  IGNORE_BACKUP="1"
else
  echo -e "\e[32mNo local backup of\e[0m $DESTINATION_DB \e[32mdue to no data.\e[0m"
fi

if [ -z "$IGNORE_BACKUP" ]; then
  read -r -p "Do you want to backup local database? [\e[45mY\e[0m/n] " response

  if [[ ! $response =~ ^(yes|y)$ ]]; then
    echo -e "\e[45mNOTE: '$DESTINATION_DB' will be backed up to 'backups/saved/${DESTINATION_DB}_$DATE.sql'\e[0m"
  else
    echo -e "\e[41mWARNING: '$DESTINATION_DB' will not be backed up!\e[0m"
    IGNORE_BACKUP=1
  fi

  echo "";
fi

read -r -p "Do you want to continue? [\e[45mY\e[0m/n] " response
echo "";

response=${response,,}    # tolower

if [[ ! $response =~ ^(yes|y)$ ]]; then

    # pull the database configuration

    if [ -z "$IGNORE_BACKUP" ]; then
        # Backup destination
        mkdir -p "./backups/saved"
        echo -e "\e[32mStarting local backup of\e[0m $DESTINATION_DB"
        mysqldump --login-path=${DESTINATION_DB} --add-drop-table ${DESTINATION_DB} | pv --progress --size "${EXPECTED_SIZE}m" > "./backups/saved/${DESTINATION_DB}_$DATE.sql"
        zip -qq "./backups/saved/${DESTINATION_DB}_$DATE.sql.zip" "./backups/saved/${DESTINATION_DB}_$DATE.sql"
        unlink "./backups/saved/${DESTINATION_DB}_$DATE.sql" > /dev/null 2>&1
      
    fi

    echo -e "\e[32mStarting remote backup of\e[0m $SOURCE_DATABASE"
    REMOTE_SQL_ZIP=$(ssh ${SOURCE_HOST} ${BACKUP_BIN_PATH} ${SOURCE_DATABASE})

    if [[ ! -z "${REMOTE_SQL_ZIP// }" ]]; then
      echo -e "\e[32mDownloading\e[0m $REMOTE_SQL_ZIP"

      mkdir -p "./backups/latest"
      #REMOTE_SQL_ZIP_SIZE=$(ssh ${SOURCE_HOST} 'stat --printf="%s" /srv/mysql-util/${REMOTE_SQL_ZIP}')

      LOCAL_SQL_ZIP="./backups/latest/${SOURCE_DB}.sql.zip}"
      REMOTE_SQL_FILE=${REMOTE_SQL_ZIP/.\/backups\/saved\//}
      REMOTE_SQL_FILE=${REMOTE_SQL_FILE%.*}
      LOCAL_SQL_FILE="./backups/saved/${REMOTE_SQL_FILE}"

      rsync -r --progress ${SOURCE_HOST}:${REMOTE_SQL_ZIP} ${LOCAL_SQL_ZIP}

      if [ -e ${LOCAL_SQL_ZIP} ]; then
        #LOCAL_SQL_ZIP_SIZE=$(stat --printf="%s" ${LOCAL_SQL_ZIP})

        #echo "${REMOTE_SQL_ZIP_SIZE} vs ${LOCAL_SQL_ZIP_SIZE}"

        # Push the source onto the destination
        #if [ "${REMOTE_SQL_ZIP_SIZE}" == "${LOCAL_SQL_ZIP_SIZE}" ]; then
          unzip -qq -o ${LOCAL_SQL_ZIP}
          echo -e "\e[32mRestoring backup\e[0m $SOURCE_DATABASE \e[32minto\e[0m ${DESTINATION_DB}"
          mysql --login-path=${DESTINATION_DB} -e "DROP DATABASE IF EXISTS ${DESTINATION_DB}"
          mysql --login-path=${DESTINATION_DB} -e "CREATE DATABASE ${DESTINATION_DB} DEFAULT CHARACTER SET utf8mb4"
          pv ${LOCAL_SQL_FILE} | mysql --login-path=${DESTINATION_DB} --database=${DESTINATION_DB}

          # Remove final restore file that we have used
          unlink ${LOCAL_SQL_ZIP}
          unlink ${LOCAL_SQL_FILE}
        #fi
      fi

      ssh ${SOURCE_HOST} unlink ${REMOTE_SQL_ZIP}
      echo -e "\e[32mDone.\e[0m"
    fi
fi

exit 0;
